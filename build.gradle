ext.moduleName = 'aion.gui'
test.dependsOn copyNativeLibsForModuleTests
clean.dependsOn deleteNativeLibs

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

apply plugin: 'com.google.osdetector'
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

apply plugin: "de.undercouch.download" //version: '3.4.3'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        resources {
            srcDirs = ['test/resources']
        }
    }
}

configurations { 
    zxing
}

dependencies.zxing group: 'com.google.zxing', name: 'core', version: '3.3.3'

task copyRenameZxing(type: Copy) {
    // Due to JDK9+'s automatic module name heuristic, the spongycastle and zxing jars 
    // clash with the same module name ("core").  This is a hacky fix that just copies
    // zxing's jar out of the Gradle cache and renames it so that the automatic module
    // name becomes "zxing"
    def cachedJar = project.configurations.zxing.findAll { it.absolutePath.contains("com.google.zxing") } 
    from cachedJar
    into 'build/zxing'
    rename(/core-.*/, 'zxing.jar')
}

build.dependsOn copyRenameZxing

dependencies {
    compile configurations.zxing
    compile project(':modLogger')
    compile project(':modMcf')
    compile project(':modAionImpl')
    compile project(':modCrypto')
    compile project(':modAionBase')
    compile project(':aion_api')
    compile files('../lib/libJson.jar')
    compile 'com.madgag.spongycastle:prov:1.58.0.0'
    compile 'com.madgag.spongycastle:core:1.58.0.0'
    compile 'com.google.guava:guava:25.1-jre'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile files(copyRenameZxing.outputs)

    compile "org.openjfx:javafx-base:11:$platform"
    compile "org.openjfx:javafx-controls:11:$platform"
    compile "org.openjfx:javafx-fxml:11:$platform"
    compile "org.openjfx:javafx-graphics:11:$platform"
    compile "org.openjfx:javafx-swing:11:$platform"

    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.9.1'
    compile group: 'io.github.novacrypto', name: 'BIP39', version: '0.1.9'
    compile group: 'io.github.novacrypto', name: 'SHA256', version: '0.0.1'
    compile group: 'io.github.novacrypto', name: 'ToRuntime', version: '0.9.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile "org.mockito:mockito-core:2.23.0"
    testCompile 'com.madgag.spongycastle:prov:1.58.0.0'
    testCompile 'com.madgag.spongycastle:core:1.58.0.0'

    integTestCompile group: 'org.testfx', name: 'testfx-core', version: '4.0.13-alpha'
    integTestCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.13-alpha'
    integTestCompile group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-9+181'
    integTestCompile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.0'
    integTestCompile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    integTestCompile project(':modAion')
    integTestCompile project(':modDbImpl')
    integTestCompile project(':modRlp')
}


integTest {
    systemProperty "testfx.robot", "glass"
    systemProperty "testfx.headless", "true"
    systemProperty "prism.order", "sw"
    systemProperty "prism.text", "t2k"
}

task fetchJavaFxRuntime(type: Download) { 
    onlyIfModified
    overwrite false
    src "http://gluonhq.com/download/javafx-11-jmods-linux"
    dest "${buildDir}/jfx/openjfx-11_linux-x64_bin-jmods.zip"
}

task unzipJavaFxRuntime(type: Copy) { 
    dependsOn fetchJavaFxRuntime

    def outDir = file("${buildDir}/pack");
    from zipTree(fetchJavaFxRuntime.dest)
    into outDir

    rootProject.tasks['prePack'].configure { 
        def jfxOutputDir = '/javafx-jmods-11' // the dir that Zip file is expected to extract to
        environment "JAVAFX_PATH", outDir.canonicalPath + jfxOutputDir
        environment "JAVAFX_MODULES", 
            "javafx.graphics,javafx.controls,javafx.base,javafx.fxml,javafx.swing"
    } 
}

task copyShellScripts(type: Copy) {
    def aionGuiSh = file("aion_gui.sh");
    rootProject.tasks['pack'].configure { 
        from aionGuiSh into('/aion/') 
    }
}

task setupAionRootProject {
    dependsOn unzipJavaFxRuntime, copyShellScripts
}
